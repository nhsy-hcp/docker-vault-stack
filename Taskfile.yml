# https://taskfile.dev
version: '3'

dotenv:
  - .env

vars:
  CONTAINER_RUNTIME: docker

tasks:
  default:
    aliases: ["all"]
    cmds:
      - task: up
      - task: unseal

  runtime:
    cmds:
      - |
        echo "Using container runtime: {{ .CONTAINER_RUNTIME }}"

  up:
    preconditions:
      - test -f .env
      - test -f docker-compose.yml
      - test -f ./volumes/vault/ca.crt
      - test -f ./volumes/vault/localhost.crt
      - test -f ./volumes/vault/localhost.key
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose up -d --pull=missing
        sleep 5
        echo "Grafana: http://localhost:3000"
        echo "Prometheus: http://localhost:9090"
        echo "Vault: http://localhost:8200"
    silent: true

  vault-up:
    preconditions:
      - test -f .env
      - test -f docker-compose.yml
      - test -f ./volumes/vault/ca.crt
      - test -f ./volumes/vault/localhost.crt
      - test -f ./volumes/vault/localhost.key
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose up vault -d --pull=missing
        sleep 5
        echo "Vault: https://localhost:8200"
    silent: true

  restart:
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose restart vault

  status:
    cmds:
      - vault status

  init:
    cmds:
      - ./scripts/10_vault_init.sh

  unseal:
    cmds:
      - |
        ./scripts/20_vault_unseal.sh
        vault token renew $(cat ./volumes/prometheus/prometheus-token)
        {{ .CONTAINER_RUNTIME }} compose restart prometheus

  backup:
    cmds:
      - echo $VAULT_CACERT
      - vault operator raft snapshot save backup-`date +"%Y%m%d-%H%M"`.snap

  down:
    aliases: ["clean"]
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose down -v
#      - docker volume rm {{.STACK_NAME }}_grafana-data
#      - docker volume rm {{.STACK_NAME }}_loki-data
#      - docker volume rm {{.STACK_NAME }}_prometheus-data
#      - docker volume rm {{.STACK_NAME }}_promtail-data
#      - docker volume rm {{.STACK_NAME }}_vault-data
#      - docker volume rm {{.STACK_NAME }}_vault-logs
    ignore_error: true
    vars:
      STACK_NAME:
        sh: basename "`pwd`"

  benchmark:
    cmds:
    - vault-benchmark run -config=./benchmark/config.hcl

  metrics:
    cmds:
      - |
        curl -sk --header "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/sys/metrics?format=prometheus"
      
  logs-vault:
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose logs -f --tail=100 vault

  logs:
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose logs -f

  stop:
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose stop

  agent-up:
    dir: ./tfc-agent
    preconditions:
      - test -f .env
      - test -f docker-compose.yml
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose up -d --pull=missing

  agent-down:
    dir: ./tfc-agent
    preconditions:
      - test -f .env
      - test -f docker-compose.yml
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose stop

  ui:
    cmds:
      - open https://localhost:8200
      - ./scripts/00_vault_vars.sh

  pull:
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose pull
    silent: true

  dev:
    preconditions:
      - test -f .env
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} run --rm -p 8200:8200 --cap-add=IPC_LOCK -e VAULT_LICENSE=$VAULT_LICENSE hashicorp/vault-enterprise:latest server -dev -dev-root-token-id=root -dev-listen-address="0.0.0.0:8200"
    silent: true


  config:
    cmds:
      - |
        ./scripts/30_vault_config.sh
        {{ .CONTAINER_RUNTIME }} compose restart prometheus

  shell:
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} exec -it {{.STACK_NAME }}_vault /bin/sh
    vars:
      STACK_NAME:
        sh: basename "`pwd`"

  create-ca:
    desc: Generate root Certificate Authority (CA) for proper PKI setup
    cmds:
      - |
          # Generate CA private key
          openssl genrsa -out ./volumes/vault/ca.key 4096
          echo "Generated CA private key: ./volumes/vault/ca.key"
      - |
          # Generate CA certificate (10-year validity)
          openssl req -new -x509 -days 3650 -key ./volumes/vault/ca.key -out ./volumes/vault/ca.crt \
            -subj "/CN=Vault Training Root CA"
          echo "Generated CA certificate: ./volumes/vault/ca.crt"
      - |
          echo "Root CA setup complete. Certificate valid for 10 years."
          openssl x509 -in ./volumes/vault/ca.crt -text -noout | grep -E "(Validity|Subject:|Issuer:)"

  create-cert:
    desc: Generate Vault server certificate signed by CA
    cmds:
      - |
          # Generate Vault server private key
          openssl genrsa -out ./volumes/vault/localhost.key 2048
          echo "Generated Vault server private key: ./volumes/vault/localhost.key"
      - |
          # Create certificate signing request with SAN
          openssl req -new -key ./volumes/vault/localhost.key -out ./volumes/vault/localhost.csr \
            -subj "/CN=localhost" \
            -addext "subjectAltName=DNS:localhost,DNS:vault,IP:127.0.0.1,IP:172.17.0.1"
          echo "Generated certificate signing request: ./volumes/vault/localhost.csr"
      - |
          # Sign the certificate with CA (1-year validity)
          openssl x509 -req -in ./volumes/vault/localhost.csr -CA ./volumes/vault/ca.crt -CAkey ./volumes/vault/ca.key \
            -CAcreateserial -out ./volumes/vault/localhost.crt -days 365 \
            -extensions v3_req -extfile <(cat <<EOF
          [v3_req]
          keyUsage = keyEncipherment,digitalSignature
          extendedKeyUsage = serverAuth
          subjectAltName = DNS:localhost,DNS:vault,IP:127.0.0.1
          EOF
          )
          echo "Generated Vault server certificate: ./volumes/vault/localhost.crt"
      - |
          # Clean up CSR file
          rm -f ./volumes/vault/localhost.csr
          echo "Vault server certificate setup complete. Certificate valid for 1 year."

  setup-pki:
    desc: Setup complete PKI infrastructure (CA + certificate)
    cmds:
      - task: create-ca
      - task: create-cert
      - echo "PKI setup complete! Use 'task verify-pki' to validate the certificate chain."

  verify-pki:
    desc: Verify PKI certificate chain and validity
    cmds:
      - |
          echo "=== Verifying Certificate Chain ==="
          if [ -f "./volumes/vault/ca.crt" ] && [ -f "./volumes/vault/localhost.crt" ]; then
            openssl verify -CAfile ./volumes/vault/ca.crt ./volumes/vault/localhost.crt
            echo ""
            echo "=== CA Certificate Info ==="
            openssl x509 -in ./volumes/vault/ca.crt -text -noout | grep -E "(Subject:|Validity|Not Before|Not After)"
            echo ""
            echo "=== Vault Server Certificate Info ==="
            openssl x509 -in ./volumes/vault/localhost.crt -text -noout | grep -E "(Subject:|Validity|Not Before|Not After|DNS:|IP:)"
          else
            echo "ERROR: PKI certificates not found. Run 'task setup-pki' first."
            exit 1
          fi

  vault-restart:
    cmds:
      - |
        {{ .CONTAINER_RUNTIME }} compose restart vault

  tokens:
    desc: List all token accessors with details
    cmds:
      - |
        echo "=== Token Accessors ==="
        vault list auth/token/accessors
        echo ""
        echo "=== Token Details ==="
        for accessor in $(vault list -format=json auth/token/accessors | jq -r '.[]'); do
          echo "--- Accessor: $accessor ---"
          vault token lookup -accessor $accessor || echo "Token not found or expired"
          echo ""
        done
