services:
  vault:
    image: hashicorp/vault-enterprise:${VAULT_VERSION:-1.20-ent}
    container_name: ${COMPOSE_PROJECT_NAME}_vault
    restart: unless-stopped
    ports:
      - "${VAULT_PORT:-8200}:8200"
    env_file:
      - .env # Contains VAULT_ADDR, VAULT_LICENSE
    environment:
      VAULT_LOG_LEVEL: ${VAULT_LOG_LEVEL:-info} # Default to 'info', allow override via .env
      VAULT_CACERT: /vault/config/ca.crt # CA certificate for client validation
    cap_add:
      - IPC_LOCK
    volumes:
      - ./volumes/vault/raft.hcl:/vault/config/raft.hcl:ro
      - ./volumes/vault/ca.crt:/vault/config/ca.crt:ro
      - ./volumes/vault/localhost.crt:/vault/config/localhost.crt:ro
      - ./volumes/vault/localhost.key:/vault/config/localhost.key:ro
      - vault-data:/vault/file  # Need this volume to fudge permissions error
      - vault-logs:/vault/logs
    command: server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8200/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s # Give Vault time to start before checking

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME}_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./volumes/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./volumes/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./volumes/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    depends_on:
      - prometheus
      - loki

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME}_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./volumes/prometheus/vault-rules.yml:/etc/prometheus/vault-rules.yml:ro
      - ./volumes/prometheus/prometheus-token:/etc/prometheus/prometheus-token:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'

  loki:
    image: grafana/loki:${LOKI_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME}_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./volumes/loki/loki.yml:/etc/loki/loki.yml:ro
      - loki-data:/loki/data
      - ./volumes/loki/loki_perm_fix.sh:/loki/loki_perm_fix.sh:ro
#    command: -config.file=/etc/loki/loki.yml
    entrypoint: /loki/loki_perm_fix.sh
    user: root # Required for permission fix as Loki runs as user Loki by default

  alloy:
    image: grafana/alloy:${ALLOY_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME}_alloy
    restart: unless-stopped
    environment:
      - VAULT_ADDR=https://vault:8200
      - VAULT_TOKEN=/etc/prometheus/prometheus-token
    volumes:
      - ./volumes/alloy/:/etc/alloy/:ro
      - alloy-data:/var/lib/alloy/data
      - vault-logs:/mnt/vault-logs:ro
      - ./volumes/prometheus/prometheus-token:/etc/prometheus/prometheus-token:ro
      - ./volumes/vault/ca.crt:/etc/ssl/certs/vault-ca.crt:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - run
      - /etc/alloy/
      - --storage.path=/var/lib/alloy/data
      - --server.http.listen-addr=0.0.0.0:12345
    ports:
      - "12345:12345"
    depends_on:
      - loki

#  json-exporter:
#    image: quay.io/prometheuscommunity/json-exporter:${JSON_EXPORTER_VERSION:-latest}
#    container_name: ${COMPOSE_PROJECT_NAME}_json-exporter
#    restart: unless-stopped
#    ports:
#      - "7979:7979"
#    volumes:
#      - ./volumes/json-exporter/config.yml:/config.yml:ro
#      - ./volumes/prometheus/prometheus-token:/etc/prometheus/prometheus-token:ro
#

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}

volumes:
  loki-data:
  grafana-data:
  prometheus-data:
  promtail-data:
  alloy-data:
  vault-data:
  vault-logs:
